{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "CICD template for OrderServ",
    "Parameters":{
		"RepoName":{
			"Type":"String",
			"Default": "orderserv-storeops",
			"Description":"Enter the CodeCommit Repo Name."
		},
		"PipelineName":{
			"Type":"String",
			"Default": "orderserv-storeops",
			"Description":"Enter the name of the CodePipeline."
		},
		"ECSCluster":{
			"Type":"String",
			"Description":"Enter the ECS Cluster Name"
		},
		"BRANCHNAME":{
			"Type":"String",
			"Default": "main",
			"Description":"main branch"
		},
		"AppName": {
			"Type": "String",
			"Default": "orderserv",
			"Description": "Application Name"
		},
		"Environment" : {
			"Type" : "String",
			"Description" : "Enter the environment name as dev/qa/perf/uat/sec/prod/dr",
			"Default" : "dev",
			"MaxLength": 4,
			"MinLength": 2
		},
		"Tenant": {
			"Type": "String",
			"Description": "Enter the tenant/country key",
			"Default": "os-kfc-in",
			"MaxLength": 9,
			"MinLength": 9
		},
		"ArtifactBucketName": {
			"Type": "String",
			"Default": "orderserv-s3-artifacts-bucket",
			"Description": "Name of the S3 bucket where Nest CFTs and Lambda zip files are placed"
		},
		"AccountID": {
			"Type": "String",
			"Default": "971757624067",
			"Description": "Enter the account ID"
		}
	},
	"Resources": {
		"CodeBuildRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
				"RoleName" : { "Fn::Sub": "orderserv-${AWS::Region}-${Environment}-${Tenant}-CodeBuildRole" },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codebuild.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": { "Fn::Sub": "orderserv-${AWS::Region}-${Environment}-${Tenant}-CodeBuildPolicy" } ,
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
								{
									"Sid": "VisualEditor0",
									"Effect": "Allow",
									"Action": [
										"ecs:DiscoverPollEndpoint",
										"application-autoscaling:*",
										"ecs:PutAccountSettingDefault",
										"ecs:CreateCluster",
										"ecs:DescribeTaskDefinition",
										"ecs:PutAccountSetting",
										"ecs:ListServices",
										"ecs:CreateCapacityProvider",
										"ecs:DeregisterTaskDefinition",
										"ecs:ListAccountSettings",
										"ecs:DeleteAccountSetting",
										"ecs:ListTaskDefinitionFamilies",
										"ecs:RegisterTaskDefinition",
										"ecs:ListTaskDefinitions",
										"ecs:CreateTaskSet",
										"ecs:ListClusters",
										"ssm:PutParameter"
									],
									"Resource": "*"
								},
								{
									"Sid": "VisualEditor1",
									"Effect": "Allow",
									"Action": [
										"s3:GetBucketAcl",
										"logs:CreateLogGroup",
										"logs:PutLogEvents",
										"s3:PutObject",
										"s3:GetObject",
										"codebuild:CreateReportGroup",
										"codebuild:CreateReport",
										"iam:PassRole",
										"logs:CreateLogStream",
										"codebuild:UpdateReport",
										"codebuild:BatchPutCodeCoverages",
										"s3:GetBucketLocation",
										"codebuild:BatchPutTestCases",
										"s3:GetObjectVersion"
									],
									"Resource": [
										{
										  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${AppName}-${AWS::Region}-${Environment}-${Tenant}-ECSExecutionRole"
										},
										{
										  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${AppName}-${AWS::Region}-${Environment}-${Tenant}-ECSTaskRole"
										},
										{
										  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
										},
										{
										  "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
										},
										{
										  "Fn::Sub": "arn:aws:s3:::codepipeline-${AWS::Region}-*"
										},
										{
										  "Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group:/*"
										},
										{
										  "Fn::Sub": "arn:aws:s3:::orderserv-*"
										},
										"*"
									]
								},
								{
									"Sid": "VisualEditor2",
									"Effect": "Allow",
									"Action": "ecs:*",
									"Resource": [
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*"
										},
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:capacity-provider/*"
										},
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/*"
										},
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-set/*"
										},
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*"
										},
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/*"
										},
										{
										  "Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*"
										}
									]
								}
							]
                        }
                    }
                ],
				"Tags": [
						{"Key": "Name", "Value": { "Fn::Sub": "orderserv-${AWS::Region}-${Environment}-${Tenant}-CodeBuildRole" } }, 
						{"Key": "AppName", "Value": { "Ref": "AppName" }},
						{"Key": "Environment", "Value": { "Ref": "Environment" }}
				]
            }
        },
		"CodePipelineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
				"RoleName" : { "Fn::Sub": "orderserv-${AWS::Region}-${Environment}-${Tenant}-CodePipelineRole" },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codepipeline.amazonaws.com",
									"events.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": { "Fn::Sub": "orderserv-${AWS::Region}-${Environment}-${Tenant}-CodePipelinePolicy" } ,
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
							{
								"Action": [
									"iam:PassRole"
								],
								"Resource": "*",
								"Effect": "Allow",
								"Condition": {
									"StringEqualsIfExists": {
										"iam:PassedToService": [
											"cloudformation.amazonaws.com",
											"elasticbeanstalk.amazonaws.com",
											"ec2.amazonaws.com",
											"ecs-tasks.amazonaws.com"
										]
									}
								}
							},
							{
								"Action": [
									"codecommit:CancelUploadArchive",
									"codecommit:GetBranch",
									"codecommit:GetCommit",
									"codecommit:GetRepository",
									"codecommit:GetUploadArchiveStatus",
									"codecommit:UploadArchive"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Action": [
									"codedeploy:CreateDeployment",
									"codedeploy:GetApplication",
									"codedeploy:GetApplicationRevision",
									"codedeploy:GetDeployment",
									"codedeploy:GetDeploymentConfig",
									"codedeploy:RegisterApplicationRevision"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Effect": "Allow",
								"Action": "codepipeline:StartPipelineExecution",
								  "Resource": "*"
							},
							{
								"Action": [ "sts:AssumeRole" ],
								"Resource": [{"Fn::Sub": "arn:aws:iam::971757624067:role/orderserv-${Environment}-crossaccount-role"}],
								"Effect": "Allow"
							},
							{
								"Action": [
									"codestar-connections:UseConnection"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Action": [
									"elasticbeanstalk:*",
									"ec2:*",
									"elasticloadbalancing:*",
									"autoscaling:*",
									"cloudwatch:*",
									"s3:*",
									"sns:*",
									"cloudformation:*",
									"rds:*",
									"sqs:*",
									"ecs:*"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Effect": "Allow",
								"Action": [
									"ec2:Describe*",
									"elasticloadbalancing:*",
									"ecs:*",
									"events:DescribeRule",
									"events:DeleteRule",
									"events:ListRuleNamesByTarget",
									"events:ListTargetsByRule",
									"events:PutRule",
									"events:PutTargets",
									"events:RemoveTargets",
									"iam:ListInstanceProfiles",
									"iam:ListRoles",
									"iam:PassRole"
								],
								"Resource": "*"
                            },
							{
								"Action": [
									"lambda:InvokeFunction",
									"lambda:ListFunctions"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Action": [
									"opsworks:CreateDeployment",
									"opsworks:DescribeApps",
									"opsworks:DescribeCommands",
									"opsworks:DescribeDeployments",
									"opsworks:DescribeInstances",
									"opsworks:DescribeStacks",
									"opsworks:UpdateApp",
									"opsworks:UpdateStack"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Action": [
									"cloudformation:CreateStack",
									"cloudformation:DeleteStack",
									"cloudformation:DescribeStacks",
									"cloudformation:UpdateStack",
									"cloudformation:CreateChangeSet",
									"cloudformation:DeleteChangeSet",
									"cloudformation:DescribeChangeSet",
									"cloudformation:ExecuteChangeSet",
									"cloudformation:SetStackPolicy",
									"cloudformation:ValidateTemplate"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Action": [
									"codebuild:BatchGetBuilds",
									"codebuild:StartBuild",
									"codebuild:BatchGetBuildBatches",
									"codebuild:StartBuildBatch"
								],
								"Resource": "*",
								"Effect": "Allow"
							},
							{
								"Effect": "Allow",
								"Action": [
									"devicefarm:ListProjects",
									"devicefarm:ListDevicePools",
									"devicefarm:GetRun",
									"devicefarm:GetUpload",
									"devicefarm:CreateUpload",
									"devicefarm:ScheduleRun"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"servicecatalog:ListProvisioningArtifacts",
									"servicecatalog:CreateProvisioningArtifact",
									"servicecatalog:DescribeProvisioningArtifact",
									"servicecatalog:DeleteProvisioningArtifact",
									"servicecatalog:UpdateProduct"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"cloudformation:ValidateTemplate"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"ecr:DescribeImages"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"states:DescribeExecution",
									"states:DescribeStateMachine",
									"states:StartExecution"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"appconfig:StartDeployment",
									"appconfig:StopDeployment",
									"appconfig:GetDeployment"
								],
								"Resource": "*"
							}
						]
						}
					}],
				"Tags": [
						{"Key": "Name", "Value": { "Fn::Sub": "orderserv-${AWS::Region}-${Environment}-${Tenant}-CodePipelineRole" } }, 
						{"Key": "AppName", "Value": { "Ref": "AppName" }},
						{"Key": "Environment", "Value": { "Ref": "Environment" }}
				]
						
			
			}
		},
		"CodeBuild": {
			"Type": "AWS::CodeBuild::Project",
			"DependsOn": "CodeBuildRole",
			"Properties": {
				"Name": {
				    "Ref": "PipelineName"
				},
				"ServiceRole": {
					"Ref": "CodeBuildRole"
				},
				"Artifacts": {
					"Type": "CODEPIPELINE"
				},
				"Source": {
					"Type": "CODEPIPELINE"
				},
				"Environment": {
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/standard:7.0",
					"Type": "LINUX_CONTAINER",
					"PrivilegedMode": true,
					"EnvironmentVariables": [
						{
							"Name": "AWS_ACCOUNT_ID",
							"Value": {
								"Ref": "AccountID"
							}
						},
						{
							"Name": "AWS_DEFAULT_REGION",
							"Value": { "Fn::Sub": "${AWS::Region}" }
						},
						{
							"Name": "IMAGE_REPO_NAME",
							"Value": {
								"Ref": "RepoName"
							}
						},
						{
							"Name": "BRANCH_NAME",
							"Value": {
								"Ref": "BRANCHNAME"
							}
						}
					]
				},
				"TimeoutInMinutes": 60,
				"Tags": [
					{
						"Key": "Name",
						"Value": {
								"Ref": "PipelineName"
							}
					},
					{
						"Key": "AppName",
                        "Value": {
                            "Ref": "AppName"
                        }
					}
				]
			}
		},
		"AmazonCloudWatchEventRule": 
		{
		  "Type": "AWS::Events::Rule",
		  "Properties": {
			"EventPattern": {
			  "source": [
				"aws.codecommit"
			  ],
			  "detail-type": [
				"CodeCommit Repository State Change"
			  ],
			  "resources": [
					{
					  "Fn::Join": [
						"",
						[
						  "arn:aws:codecommit:",
						  {
							"Ref": "AWS::Region"
						  },
						  ":",
						  {
							"Ref": "AWS::AccountId"
						  },
						  ":",
						  {
							"Ref": "RepoName"
						  }
						]
					  ]
					}
				  ],
			  "detail": {
				"event": [
				  "referenceCreated",
				  "referenceUpdated"
				],
				"referenceType": [
				  "branch"
				],
				"referenceName": [
					{
					 "Ref" : "BRANCHNAME"
					}
				]
			  }
			},
			"State": "ENABLED",
			"Targets": [
			  {
				"Arn": {
				  "Fn::Join": [
					"",
					[
					  "arn:aws:codepipeline:",
					  {
						"Ref": "AWS::Region"
					  },
					  ":",
					  {
						"Ref": "AWS::AccountId"
					  },
					  ":",
					  {
						"Ref": "PipelineName"
					  }
					]
				  ]
				},
				"RoleArn": {"Fn::GetAtt" : ["CodePipelineRole", "Arn"] },
				"Id": "codepipeline-AppPipeline"
			  }
			]
			}
		},
		"CodePipeline": {
			"Type": "AWS::CodePipeline::Pipeline",
			"DependsOn": ["CodePipelineRole","CodeBuildRole"],
			"Properties": {
				"Name": {
				    "Ref": "PipelineName"
				},
				"RoleArn": {"Fn::GetAtt" : ["CodePipelineRole", "Arn"] },
				"ArtifactStore": {
					"Type": "S3",
					"Location": {
						"Ref": "ArtifactBucketName"
					}
				},
				"Stages": [
					{
						"Name": "Source",
						"Actions": [
							{
								"Name": "App",
								"ActionTypeId": {
									"Category": "Source",
									"Owner": "AWS",
									"Version": 1,
									"Provider": "CodeCommit"
								},
								"Configuration": {
									"PollForSourceChanges": false,
									"BranchName": {
										"Ref": "BRANCHNAME"
									},
									"RepositoryName": {
										"Ref": "RepoName"
									}
								},
								"OutputArtifacts": [
									{
										"Name": "App"
									}
								],
								"RunOrder": 1
							}
						]
					},
					{
						"Name": "Build",
						"Actions": [
							{
								"Name": "Build",
								"ActionTypeId": {
									"Category": "Build",
									"Owner": "AWS",
									"Version": 1,
									"Provider": "CodeBuild"
								},
								"Configuration": {
									"ProjectName": {
										"Ref": "PipelineName"
									}
								},
								"InputArtifacts": [
									{
										"Name": "App"
									}
								],
								"OutputArtifacts": [
									{
										"Name": "BuildOutput"
									}
								],
								"RunOrder": 1
							}
						]
					}
				]
			}
		}
	}
}